var express = require('express'),
    app = express(),
    http = require('http'),
    server = http.createServer(app),
    io = require('socket.io').listen(server),
    exec = require('child_process').exec,
    util = require('util'),
    mqtt = require('mqtt'), 
    url = require('url'),
    sys = require('sys'),
    SerialPort = require('serialport').SerialPort;


/////////////////////////////// DEBUG /////////////// 

var DEBUG = false;
// var DEBUG = true;
////////////////////////////// APP SETTINGS //////////////////////

// app.set('domain', process.env.IP);
app.set('port', process.env.PORT);
    // app.use(express.urlencoded());
    // app.use(express.json());
    // app.use(express.methodOverride());
    // app.use(express.compress());
    // app.use(express.responseTime());
//    app.use(cors({credentials: false}));
app.use(function(req, res, next) {
        res.header("Access-Control-Allow-Origin", "*");
        res.header("Access-Control-Allow-Headers", "X-Requested-With");
        res.header("Access-Control-Allow-Headers", "Content-Type");
        res.header("Access-Control-Allow-Methods", "PUT, GET, POST, DELETE, OPTIONS");
        next();
    });
//serve our code
app.use(express.static('www'));

// CORS (Cross-Origin Resource Sharing) headers to support Cross-site HTTP requests
app.all('*', function(req, res, next) {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "X-Requested-With");
    next();
});
app.set('port', process.env.PORT || 5000);
// API Routes
// app.get('/blah', routeHandler);

////////////////////// GETTING ARDUINO TEMPERATURE VIA SERIAL /////////////

var arduinoTemp = {} // TODO


// getting arduino temperature remotely with NRR24L+ 
// or via usb connection to raspberry prot (SERIALPORT)
// for purpes of test make funciton returning autogenerated values every second
function random (low, high) {
    return Math.random() * (high - low) + low;
}

var serialport = new SerialPort("/dev/tty-usbserial1", {
  baudrate: 9600
}, false); // this is the openImmediately flag [default is true]

serialport.on('error', function(err) {
  console.log(err); // THIS SHOULD WORK!
});

serialport.open(function (err) {
  if (err) {
     console.log(err);
     return;
  }
  console.log('open');
  serialport.on('data', function(data) {
    console.log('data received: ' + data);
  });  
  serialport.write("ls\n", function(err, results) {
    console.log('err ' + err);
    console.log('results ' + results);
  });  
});

////////////////////// GETTING ARDUINO TEMPERATURE VIA RADIO NRF24L+ /////////////
//TODO

//////////////////////// MQTT BROKER ///////////////////////////

// // Create a client connection
var client = mqtt.connect('mqtt://unnrixva:xmcM9mRlT34Y@m20.cloudmqtt.com:13512');

client.on('connect', () => { // When connected
    console.log('mqtt client connected');

     
     client.subscribe('light/hall', ()=>{
         console.log('client subscribed to light/hall');
     });  
     client.subscribe('light/kitchen', ()=>{
         console.log('client subscribed to light/kitchen');
     });
     //TODO subscibe to other topics
     
     
});

//   // publish a message to a topic
//   client.publish('home/config', 'my message', function() {
//     console.log("Message is published");
//     client.end(); // Close the connection when published
//   });
  
//   // listen to messages coming from the mqtt broker
//   client.on('message', function (topic, payload, packet) {
//     console.log(topic+'='+payload);
//     io.sockets.emit('mqtt',{'topic':String(topic),
//                             'payload':String(payload)});
// });
// });


// io.configure(function(){
//   io.set('transports',['xhr-polling']); //Use long-polling instead of websockets!
//   io.set('resource','/myApp/server.js'); //Where we'll listen for connections.
// });


/////////////////////////////// SOCKT IO //////////////////////         
// var connections = new Array; // or better use [] ?
var connections = [];
                      
// io.sockets.on('connection', function (socket) {                      
io.on('connection', function (socket) {
    
    console.log('socket client connected');
    // socket connection indicates what mqtt topic to subscribe to in data.topic
    socket.on('subscribe', function(data){
       console.log('Subscribing to ' + data.topic);
       socket.join(data.topic);
       client.subscribe(data.topic);
    });
    
    // when socket connection publishes a message, forward that message
    // the the mqtt broker
    socket.on('publish', function (data) {
        console.log('Publishing to '+data.topic);
        client.publish(data.topic, String(data.payload));
        
    });
    
    socket.on("*", function(event, data){
       console.log("reacting on any event");
       console.log(event);
       console.log(data);
    });
    
    socket.on('message', function(data){
        console.log(data);
    });
    //1 Hall
    socket.on('LightHall', function(data){
        console.log(data);
    });
    //2 Kitchen
    socket.on('LightKitchen', function(data){
        console.log(data);
    });
    //3 BedRoom
    socket.on('LightBedRoom', function(data){
        console.log(data);
    });
    //4 LivingRoom
    socket.on('LightLivingRoom', function(data){
        console.log(data);
    });
    //5 BathRoom
    socket.on('LightBathRoom', function(data){
        console.log(data);
    });
    
    //1
    socket.on('hallSlider', function(data){
        console.log(data);
        // console.log(data.name + ' '+  data.value);
    });
    //2
    socket.on('kitchenSlider', function(data){
        console.log(data);
        // console.log(data.name + ' ' + data.value);
    });
    //3
    socket.on('bedRoomSlider', function(data){
        console.log(data);
        // console.log(data.name + ' ' + data.value);
    });
    //4
    socket.on('livingRoomSlider', function(data){
        console.log(data);
        // console.log(data.name + ' ' + data.value);
    });
    //5
    socket.on('bathRoomSlider', function(data){
        console.log(data);
        // console.log(data.name + ' ' + data.value);
    });
    
    /*
    socket.on('Arduino/temp', (data)=>{ // ??
        console.log(data); //arduino temperature
        socket.emit('publish', {topic:"Arduino/temp",payload:arduinoTemp});
    })
    */
    
    setInterval(function () {
        if (DEBUG){
            console.log('publishing to Arduino/temp')
        } 
         arduinoTemp = random(20,30)
        //  socket.emit('publish', {topic:"Arduino/temp", payload:arduinoTemp.toFixed(2)})
         client.publish("Arduino/temp", String(arduinoTemp.toFixed(2)));
         //socket.emit('publish', {topic:"Arduino/temp",payload:arduinoTemp});
         //socket.emit('server:msg', {data: random(20,30)});
        
    }, 5000);
});



// listen to messages coming from the mqtt broker
client.addListener('mqttData', function(topic, payload){
  sys.puts(topic+'='+payload);
  io.sockets.emit('mqtt',{'topic':String(topic),
    'payload':String(payload)});
});
//OR

// listen to messages coming from the mqtt broker
client.on('message', function (topic, payload, packet) {
    
        console.log(topic+'='+payload);
    
    io.sockets.emit('mqtt',{'topic':String(topic),
                            'payload':String(payload)});
                            
});




///////////////////////////// SERVER ///////////////////////////////

server.listen(process.env.PORT, process.env.IP, function(){
    console.log('Express server listening on port ' + app.get('port'));
});
// app.listen(app.get('port'), function () {
//     console.log('Express server listening on port ' + app.get('port'));
// });



